#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('portfolio-deployment:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Read SSL certificate and key
 */
//
// var privateKey = fs.readFileSync(path.join(__dirname, 'sslcert/server.key'), 'utf8');
// var certificate = fs.readFileSync(path.join(__dirname, 'sslcert/server.crt'), 'utf8');
// var credentials = { key: privateKey, cert: certificate };

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Create HTTPS server.
 */

// var httpsPort = normalizePort(process.env.HTTPS_PORT || '8443');
// var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided ports, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening.bind(null, httpServer, port));

// httpsServer.listen(httpsPort);
// httpsServer.on('error', onError);
// httpsServer.on('listening', onListening.bind(null, httpsServer, httpsPort));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */

function onListening(serverInstance, port) {
  var addr = serverInstance.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

